(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[968],{2136:(e,a,t)=>{Promise.resolve().then(t.bind(t,9506))},2230:()=>{},5700:e=>{e.exports={style:{fontFamily:"'GeistMono', ui-monospace, SFMono-Regular, Roboto Mono, Menlo, Monaco, Liberation Mono, DejaVu Sans Mono, Courier New, monospace"},className:"__className_c1e5c9",variable:"__variable_c1e5c9"}},6314:(e,a,t)=>{"use strict";t.d(a,{A:()=>i});var n=t(5155);t(2230);var o=t(5700),r=t.n(o);function i(e){let{projectName:a,projectBrief:t,projectSourceCodeLink:o,technologies:i,videoLink:s,startDate:c,endDate:l}=e;return(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("div",{className:"medium-separator",children:[o?(0,n.jsx)("h3",{className:"condense accent2 ".concat(r().className),children:a}):(0,n.jsx)("h3",{className:"",children:a}),c&&l?(0,n.jsxs)("h4",{children:[c," - ",l]}):(0,n.jsx)(n.Fragment,{}),(0,n.jsx)("p",{children:t}),(0,n.jsx)("div",{className:"small-separator"})]})})}},9506:(e,a,t)=>{"use strict";t.r(a),t.d(a,{default:()=>i});var n=t(5155),o=t(6314);let r=[{metadata:{projectName:"mrun",projectBrief:"mrun (mike's runtime) is low-level OCI-compliant container runtime. I have been learning a lot about advanced Linux Kernel features such as namespaces and cgroups, virtual filesystems, virtual networking, seccomp, and all things process isolation. I'm also learning a lot about OCI (Open Container Initiative) specifications so that my project complies with industry standards for runtimes, images, etc. \n\n",projectSourceCodeLink:"https://github.com/mikeyfennelly1/mrun",technologies:["Linux","Containerization","Go","C"],startDate:"September 2023",endDate:"April 2024"},repoName:"mrun"},{metadata:{projectName:"eefenn-cli",projectBrief:"A command-line tool for managing scripts and automation workflows on Ubuntu. I created this tool because it was something that I wanted for some repetitive tasks that were cropping up with eefenn (hence why it is creatively named eefenn-cli). This command-line tool is essentially a command-line manager for local automation tasks. It provides a simple interface to create, manage, and run scripts.",projectSourceCodeLink:"https://github.com/mikeyfennelly1/eefenn-cli",technologies:["Linux","Automation","Go"],startDate:"September 2023",endDate:"April 2024"},repoName:"eefenn-cli"},{metadata:{projectName:"os--char-dev",projectBrief:"This project was an end-of-block project in college for Operating Systems with Mark. This project was intended to be a demonstration of some of the topics covered; hence, it is a loadable kernel module with an accompanying user-space application. The project that I was a part of was a character device driver to get system information from kernel space and a multithreaded server to serve the data in JSON format to client processes â€“ both written in C.",projectSourceCodeLink:"https://github.com/mikeyfennelly1/os--char-dev--lkm",technologies:["Linux","Device Drivers","C","Unit Testing"],startDate:"September 2023",endDate:"April 2024"},repoName:"os--char-dev--lkm"}];function i(){return(0,n.jsx)(n.Fragment,{children:(0,n.jsxs)("section",{children:[(0,n.jsx)("h1",{className:"large-padding-gap-top",children:"Linux Kernel Projects"}),(0,n.jsx)("p",{className:"small-separator medium-bottom-separator",children:"Low level operating system technology is a topic that I have been getting very interested in since beginning college. Mark Burkley is a  man who has had huge influence on my work since starting college. This interest of mine has been largely fostered by Mark (perhaps unbeknownst to himself) so I have to give him his flowers for being an inspiration to some of the following work."}),r.map(e=>(0,n.jsx)("div",{className:"project-columns",children:(0,n.jsx)(o.A,{startDate:e.metadata.startDate,endDate:e.metadata.endDate,projectName:e.metadata.projectName,projectBrief:e.metadata.projectBrief,projectSourceCodeLink:e.metadata.projectSourceCodeLink},Math.random())},Math.random()))]})})}}},e=>{var a=a=>e(e.s=a);e.O(0,[831,244,441,684,358],()=>a(2136)),_N_E=e.O()}]);